// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BusinessCategories {
  SOLE
  INDIVIDUAL
  COMPANY
}

enum BankAccountTypes {
  SAVING
  CURRENT
}

enum RoleScope {
  GLOBAL
  ORGANIZATION
}

enum Roles {
  SUPERADMIN
  ADMIN
  EXECUTIVE
  OTHERS
}

enum UserType {
  BUSINESS
  INDIVIDUAL
}

model Organization {
  id                             String                         @id @default(uuid())

  //business details
  company_name                   String?
  brand_name                     String?
  company_logo                   String?
  company_website                String?
  parcels_per_month              String?
  company_email                  String?

  //billing details
  billing_address                String?
  billing_address_landmark       String?
  billing_address_pincode        String?
  billing_address_city           String?
  billing_address_state          String?
  billing_address_contact_number String?

  //invoice preference
  invoice_prefix                 String?
  invoice_series_starting_from   String?
  invoice_cin_number             String?
  invoice_hide_buyer_contact     Boolean                        @default(true)
  invoice_signature              String?

  //kyc company
  business_category              BusinessCategories?
  business_subcategory           String?
  business_gstin                 String?

  //kyc individual
  individual_pan                 String?
  individual_aadhar              String?

  verification_ref_id            String?

  is_kyc_done                    Boolean                        @default(false)
  kyc_detail                     Json?

  //pickup address
  pickup_address                 String?
  pickup_landmark                String?
  pickup_pincode                 String?
  pickup_city                    String?
  pickup_state                   String?
  pickup_lat                     String?
  pickup_long                    String?
  pickup_username                String?
  pickup_user_number             String?

  is_pickup_rto_same             Boolean                        @default(true)

  //rto address
  return_address                 String?
  return_landmark                String?
  return_pincode                 String?
  return_city                    String?
  return_state                   String?
  return_lat                     String?
  return_long                    String?
  return_username                String?
  return_user_number             String?

  remittance_info                OrganizationRemittance?
  users                          User[]
  courier_priority_list          OrganizationCouriersPriority[]
  courier_base_rates             CourierBaseCharges[]
  rate_card                      CourierRateCard[]

  created_at                     DateTime                       @default(now())
  updated_at                     DateTime                       @updatedAt
}

model OrganizationRemittance {
  id                String           @id @default(uuid())
  account_number    String
  account_type      BankAccountTypes
  beneficiary_name  String
  ifsc_code         String
  bank_name         String
  branch_name       String
  remittance_period Int              @default(14) @omit

  org_id            String           @unique
  org               Organization     @relation(fields: [org_id], references: [id])

  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
}

model User {
  id                  String            @id @default(uuid())
  email               String?           @unique
  first_name          String?
  last_name           String?
  phone_number        String?           @unique
  is_active           Boolean           @default(true)
  avatar              String?
  password            String            @omit @password
  role                Roles
  scope               RoleScope
  email_verified      Boolean           @default(false)
  buyer_detail_access Boolean           @default(false)
  
  // New field to distinguish user types
  user_type           UserType          

  // Both business and individual users will have an organization
  // For individual users, organization will just store their personal shipping info
  org_id              String
  org                 Organization      @relation(fields: [org_id], references: [id])

  permissions         UserPermissions[]
  jwt_blacklist       JWTBlacklist[]

  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
}

model JWTBlacklist {
  id         String   @id @default(uuid())
  token      String
  jti        String   @unique

  user_id    String
  user       User     @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Permissions {
  id          String            @id @default(uuid())
  tag         String
  description String?

  users       UserPermissions[]

  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
}

model UserPermissions {
  id            String      @id @default(uuid())

  user_id       String
  user          User        @relation(fields: [user_id], references: [id])

  permission_id String
  permission    Permissions @relation(fields: [permission_id], references: [id])

  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@unique([user_id, permission_id])
}

model Couriers {
  id                   String                         @id @default(uuid())
  name                 String
  logo                 String?

  orgnizations         OrganizationCouriersPriority[]
  courier_base_charges CourierBaseCharges[]
  rate_card            CourierRateCard[]

  created_at           DateTime                       @default(now())
  updated_at           DateTime                       @updatedAt
}

model OrganizationCouriersPriority {
  id         String       @id @default(uuid())
  priority   Int

  org_id     String
  org        Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)

  courier_id String
  courier    Couriers     @relation(fields: [courier_id], references: [id], onDelete: Cascade)

  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  @@unique([org_id, courier_id, priority])
}

model CourierBaseCharges {
  id                String       @id @default(uuid())

  courier_id        String
  courier           Couriers     @relation(fields: [courier_id], references: [id])

  org_id            String
  org               Organization @relation(fields: [org_id], references: [id])

  dead_weight       Int
  volumetric_factor Int
  min_cod_charges   Int?
  cod_percentage    Float?
  max_cod_charges   Int?
  qc_charge         Int?
  insurance_charge  Int?

  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
}


model CourierRateCard {
  id             String       @id @default(uuid())

  courier_id     String
  courier        Couriers     @relation(fields: [courier_id], references: [id])

  org_id         String
  org            Organization @relation(fields: [org_id], references: [id])

  zone_code      String
  transport_mode String     //EXPRESS, SURFACE
  shipment_type  String     //FORWARD, RTO, REVERSE

  base_rate      Float
  base_kg        Float
  add_x          Float
  add_x_rate     Float

  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  @@index([courier_id, org_id, zone_code, transport_mode, shipment_type])
}